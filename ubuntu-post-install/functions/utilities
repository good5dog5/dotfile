#!/bin/bash
#
# Update the list of packages in 'data/utilities.list' to suit your preferences

# Install preferred utilities
function install_utilities {
	display_title "Starting 'install_utilities' function..."
	# Check list
	UTILS=$(dirname "$0")'/data/utilities.list'
	# Draw window
	if (eval `resize` && whiptail --title \
		"Preferred System Utilities"  --yesno \
		"Current list of preferred system utilities: \n\n$(for LINE in $(cat $UTILS); do echo '  '$LINE; done) \n\nProceed with installation?" \
		$LINES $COLUMNS $(( $LINES - 12 )) \
		--scrolltext ) then
		# Install loop
		display_info 'Installing preferred utilities...'
		for PACKAGE in $(cat $UTILS); do
			# Check if package is installed
			check_packages $PACKAGE
			EXITSTATUS=$?
			# If package is not installed
			if [ $EXITSTATUS = 1 ]; then
				# Install package
				display_info "'$PACKAGE' is not installed. Installing..."
				# Admin privileges
				elevate_privilege "apt install -y --no-install-recommends $PACKAGE"
				# Done
				display_success "'$PACKAGE' installation is complete."
			else
				# Show already installed message
				echo "Package '$PACKAGE' is installed."
			fi
		done
		# Finish
		display_success "Installation complete."
		whiptail --title "Finished" --msgbox "Installation complete." 8 64
		utilities
	else
		utilities
	fi
}

# Update the list of packages in 'data/node.list' to suit your preferences

# Install preferred node utilities
function node_packages {
	display_title "Dependency check..."
	node_check
	display_title "Starting 'node_packages' function..."
	# Check list
	NODE=$(dirname "$0")'/data/node.list'
	# Draw window
	if (eval `resize` && whiptail --title \
		"Preferred System Utilities"  --yesno \
		"Current list of preferred NodeJS-based tools: \n\n$(for LINE in $(cat $NODE); do echo '  '$LINE; done) \n\nProceed with installation?" \
		$LINES $COLUMNS $(( $LINES - 12 )) \
		--scrolltext ) then
		# Install loop
		display_info 'Installing preferred NodeJS-based tools...'
		for PACKAGE in $(cat $NODE); do
			# Check if package is installed
			PKGCHECK=$(npm list -g | grep $PACKAGE)
			# If package is not installed
			if [ "" == "$PKGCHECK" ]; then
				# Install package
				display_info "'$PACKAGE' is not installed. Installing..."
				# Admin privileges
				elevate_privilege "npm install -g $PACKAGE"
				# Done
				display_success "'$PACKAGE' installation is complete."
			else
				# Show already installed message
				echo "Package '$PACKAGE' is installed."
			fi
		done
		# Finish
		display_success "Installation complete."
		whiptail --title "Finished" --msgbox "Installation complete." 8 64
		utilities
	else
		utilities
	fi
}

# Check for and install required packages for this script set.
function node_check {
	# Check list
	NODEDEPS="npm"
	for PACKAGE in $NODEDEPS; do
		# Check if package is installed
		check_packages $PACKAGE
		EXITSTATUS=$?
		# If package is not installed
		if [ $EXITSTATUS = 1 ]; then
			display_warning "Dependency '$PACKAGE' is not present on your system and is required to continue."
			# Draw window
			if (eval `resize` && whiptail \
				--yesno \
				--title "Dependency Check" \
				--ok-button "Install" \
				--cancel-button "Go Back" \
				"In order to continue '$PACKAGE' needs to be installed. Continue?" 8 64 ) then
				display_info "Installing '$PACKAGE' installed. Proceeding."
				# Admin privileges
				elevate_privilege "apt install -y $PACKAGE"
				display_success "Package '$PACKAGE' installed. Proceeding."
			else
				display_warning "Required dependencies are not present. :/"
				# Draw window
				whiptail --msgbox "Required dependency '$PACKAGE' was not installed. Aborting. \nPlease try again." 8 64
				utilities
			fi
		else
			echo "Dependency '$PACKAGE' is installed."
		fi
	done
	display_success "Dependencies are installed. :)"
	echo "Proceeding."
}

# Install utilities
function utilities {
	display_title "Starting 'utilities' function..."
	# check exit status
	EXITSTATUS=$?
	if [ $EXITSTATUS = 0 ]; then
		# Draw window
		$(eval `resize`&& whiptail \
		--notags \
		--title "Install Utilities" \
		--menu "\nWhat would you like to do?" \
		$LINES $COLUMNS $(( $LINES - 12 )) \
		--cancel-button "Go Back" \
		install_utilities	'Install preferred system utilities' \
		node_packages		'Install NodeJS-based tools' \
		3>&1 1>&2 2>&3)
	else
		main
	fi
}
#!/bin/bash

# Package Download Function Template
#
# most of this template is complete, you'll just need to change the three variables:
#
#	package_name = the name of the downloaded package you'll be installing
#	app_name = a human readable name of the app you're installing
#	package_version = version number of the package, if applicable, usually formatted as '1.2.3'
#
# and replace 'https://download.example.com/packages/linux/' with an actual link to remote packages
#
# next set the 'function_name' and reference it in the 'thirdparty' function 
# in the 'thirdparty' function file and be sure to 'source' it in the list at the top of that file as well

# Function
function function_name {
	# Variables
	NAME="app_name"
	PACKAGE="package_name"
	VERSION="package_version"
	# Install
	display_header 'Begin '$NAME' installation'
	# Check if package is installed
	check_packages $PACKAGE
	EXITSTATUS=$?
	# If package is not installed
	if [ $EXITSTATUS = 1 ]; then
		display_info $NAME 'is not installed.'
		echo 'Proceeding'
		display_info 'Downloading '$NAME'...'
		# Download Debian file that matches system architecture
		case `uname -i` in
			i386|i486|i586|i686)
				curl -O https://download.example.com/packages/linux/${PACKAGE}_${VERSION}_i386.deb
				;;
			x86_64)
				curl -O https://download.example.com/packages/linux/${PACKAGE}_${VERSION}_amd64.deb
				;;
			*)
				whiptail --title "Error." --msgbox "No remote packages available to download." 8 64
				;;
		esac
		# Install package(s)
		display_info 'Installing '$NAME'...'
		# Admin privileges
		elevate_privilege "dpkg -i $PACKAGE*.deb"
		elevate_privilege "apt install -fy"
		# Cleanup and finish
		rm $PACKAGE*.deb
		# Done
		display_success "Installation of '$PACKAGE' complete."
		whiptail --title "Finished" --msgbox "Installation of $NAME complete." 8 64
		thirdparty
	else
		# Already installed
		display_info $NAME 'already installed.'
		whiptail --title "Finished" --msgbox "$NAME is already installed." 8 64
		thirdparty
	fi
}
# Tmux configuration
# use tmux list-keys to show all key-binding

#Soure Powerline configure
#source ~/anaconda3/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf
# theme
source-file "${HOME}/.tmux-themepack/powerline/double/cyan.tmuxtheme"
#Set the default terminal mode to 256 color
set -g default-terminal "screen-256color"
#Enable mouse scroll with switch to th pane
set -g terminal-overrides 'xterm*:smcup@:rmcup@'


set-option -g history-limit 5000

#Enable utf-8 on status bar
set -g status on
set -g status-interval 2

#Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1

# Free the original ctrl-b and rebind prefix to Ctrl- a 
unbind C-b 
set -g prefix C-a
#Ensure that we can sent ctrl-a to other app
bind C-a send-prefix

#Reload configuation
bind r source-file ~/.config/tmux/tmux.conf\; display "conf file reloaded!" 

#Create new window
bind c neww -c '#{pane_current_path}'

#Splitting  panes
unbind %
bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'

#Move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

#Pane resize
bind -r H resize-pane -L 20  
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 20

#Automatically set window title
setw -g automatic-rename

#Enable vim key
# for version older than 3.x
set -g status-keys vi
# bind -T vi-edit Up   history-up
# bind -T vi-edit Down history-down

#Bind L to last activate window
bind a last-window

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n 'C-\'  if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"

# Save history buffer to file
bind-key P command-prompt -p 'save history to filename:' -I '~/tmux.history' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

####################
#  mac os related  #
####################

# Copy-paste integration
if-shell -b 'test "$(uname)" = "Darwin"' \
      'set-option -g default-command "reattach-to-user-namespace -l zsh"' ''

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
# for version older than 3.x
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
# for version older than 3.x
# unbind -t vi-copy Enter
# bind-key -T vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Bind ']' to use pbpaste
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

set-option -sg escape-time 10


# Renumber tmux window
bind R  move-window -r\; display "Windows reordered..."

# binding settings for 3.x
# ref https://github.com/tmux/tmux/issues/754
bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down
unbind-key -T copy-mode-vi Space     ;   bind-key -T copy-mode-vi v send-keys -X begin-selection
unbind-key -T copy-mode-vi Enter     ;   bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
unbind-key -T copy-mode-vi C-v       ;   bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
unbind-key -T copy-mode-vi [         ;   bind-key -T copy-mode-vi [ send-keys -X begin-selection
unbind-key -T copy-mode-vi ]         ;   bind-key -T copy-mode-vi ] send-keys -X copy-selection
